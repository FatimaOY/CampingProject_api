generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = "mysql://root:root@localhost:3306/campingproject"
}

model users {
  user_id       Int             @id @default(autoincrement())
  email         String          @unique(map: "email") @db.VarChar(255)
  password      String          @db.VarChar(255)
  first_name    String?         @db.VarChar(255)
  last_name     String?         @db.VarChar(255)
  phone_number  String?         @db.VarChar(20)
  is_admin      Boolean?        @default(false)
  image_url     String?         @db.VarChar(255)
  created_at    DateTime?       @default(now()) @db.DateTime(0)
  bookings      bookings[]
  camping_spots camping_spots[] @relation("UserToCampingSpots")
  reviews       reviews[]

  @@map("users")
}

model country {
  country_id Int             @id @default(autoincrement())
  name       String          @db.VarChar(255)
  spots      camping_spots[]
  cities     city[]

  @@map("country")
}

model city {
  city_id    Int             @id @default(autoincrement())
  name       String          @db.VarChar(255)
  country_id Int?
  spots      camping_spots[]
  country    country?        @relation(fields: [country_id], references: [country_id], onDelete: NoAction, onUpdate: NoAction, map: "city_ibfk_1")

  @@index([country_id], map: "country_id")
  @@map("city")
}

model camping_spots {
  spot_id               Int                     @id @default(autoincrement())
  owner_id              Int?
  name                  String?                 @db.VarChar(255)
  location              String?                 @db.VarChar(255)
  city_id               Int?
  coutry_id             Int?
  description           String?                 @db.Text
  amountGuests          Int?
  is_Active             Boolean?                @default(true)
  is_booked             Boolean?                @default(false)
  price_per_night       Float?
  created_at            DateTime?               @default(now()) @db.DateTime(0)
  availability          availability[]
  bookings              bookings[]
  owner                 users?                  @relation("UserToCampingSpots", fields: [owner_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "camping_spots_ibfk_1")
  city                  city?                   @relation(fields: [city_id], references: [city_id], onDelete: NoAction, onUpdate: NoAction, map: "camping_spots_ibfk_2")
  country               country?                @relation(fields: [coutry_id], references: [country_id], onDelete: NoAction, onUpdate: NoAction, map: "camping_spots_ibfk_3")
  campingspot_amenities campingspot_amenities[]
  images                images[]
  reviews               reviews[]

  @@index([city_id], map: "city_id")
  @@index([coutry_id], map: "coutry_id")
  @@index([owner_id], map: "owner_id")
  @@map("camping_spots")
}

model images {
  image_id      Int            @id @default(autoincrement())
  spot_id       Int?
  image_url     String?        @db.VarChar(255)
  uploaded_at   DateTime?      @default(now()) @db.DateTime(0)
  camping_spots camping_spots? @relation(fields: [spot_id], references: [spot_id], onDelete: NoAction, onUpdate: NoAction, map: "images_ibfk_1")

  @@index([spot_id], map: "spot_id")
  @@map("images")
}

model availability {
  availability_id Int            @id @default(autoincrement())
  spot_id         Int?
  Date            DateTime?      @db.Date
  isBooked        Boolean?       @default(false)
  camping_spots   camping_spots? @relation(fields: [spot_id], references: [spot_id], onDelete: NoAction, onUpdate: NoAction, map: "availability_ibfk_1")

  @@index([spot_id], map: "spot_id")
  @@map("availability")
}

model status {
  status_id Int        @id @default(autoincrement())
  name      String?    @db.VarChar(255)
  bookings  bookings[]

  @@map("status")
}

model bookings {
  booking_id     Int            @id @default(autoincrement())
  user_id        Int?
  spot_id        Int?
  check_in_date  DateTime?      @db.Date
  check_out_date DateTime?      @db.Date
  status_id      Int?
  total_price    Float?
  created_at     DateTime?      @default(now()) @db.DateTime(0)
  user           users?         @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "bookings_ibfk_1")
  spot           camping_spots? @relation(fields: [spot_id], references: [spot_id], onDelete: NoAction, onUpdate: NoAction, map: "bookings_ibfk_2")
  status         status?        @relation(fields: [status_id], references: [status_id], onDelete: NoAction, onUpdate: NoAction, map: "bookings_ibfk_3")

  @@index([spot_id], map: "spot_id")
  @@index([status_id], map: "status_id")
  @@index([user_id], map: "user_id")
  @@map("bookings")
}

model reviews {
  review_id  Int            @id @default(autoincrement())
  user_id    Int?
  spot_id    Int?
  rating     Int?
  comment    String?        @db.Text
  created_at DateTime?      @default(now()) @db.DateTime(0)
  user       users?         @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "reviews_ibfk_1")
  spot       camping_spots? @relation(fields: [spot_id], references: [spot_id], onDelete: NoAction, onUpdate: NoAction, map: "reviews_ibfk_2")

  @@index([spot_id], map: "spot_id")
  @@index([user_id], map: "user_id")
  @@map("reviews")
}

model amenities {
  amenity_id            Int                     @id @default(autoincrement())
  name                  String?                 @db.VarChar(255)
  description           String?                 @db.Text
  campingspot_amenities campingspot_amenities[]

  @@map("amenities")
}

model campingspot_amenities {
  campingSpot_am_id Int            @id @default(autoincrement())
  spot_id           Int?
  amenity_id        Int?
  camping_spots     camping_spots? @relation(fields: [spot_id], references: [spot_id], onDelete: NoAction, onUpdate: NoAction, map: "campingspot_amenities_ibfk_1")
  amenities         amenities?     @relation(fields: [amenity_id], references: [amenity_id], onDelete: NoAction, onUpdate: NoAction, map: "campingspot_amenities_ibfk_2")

  @@index([amenity_id], map: "amenity_id")
  @@index([spot_id], map: "spot_id")
}
